{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/06/30/hello-world/"},{"title":"Data 100学习笔记 - Pandas","text":"Data Frames, Series, and Indices-Data frame: 2D tabular data ( a collection of series that all share the same index)-Series: 1D data/ columnar data-Index: A sequence of row labels (不一定是数字，不需要unique)Column name通常是unique的（数字1 和 string “1” 被认为是不同的；相同的column名称会被自动修改成 name name1 name2） Basic operations读取 elections = pd.read_csv(&quot;elections.csv&quot;) 创建 1234new_elections = pd.DataFrame({ result:[&quot;win&quot;,&quot;lose&quot;], colunName:[&quot;Acontent&quot;,&quot;Bcontent&quot;]}) 截取开头或结尾的内容，行数可以自定义: elections.head(); eletions.tail(). 可以将index改成任意column 12elections_year_index = pd.read_csv(&quot;elections.csv&quot;, index_col = &quot;Year&quot;) //返回的是copyelections_party_index = elections.set_index(&quot;Party&quot;) //效果相同 获得Random Sample: elctions.sample(20) The [] OperatorIndexing with []Column name argument to [ ] 产生 SeriesList Argument to [ ] 产生 Data Frame[ ：] row slicing. [inclusive : exclusive] 123456789101112131415//Serieselections_year_index[&quot;Candidate&quot;] //Data Frameelections_year_index[ [&quot;Candidate&quot;, &quot;Party&quot;] ]elections_year_index[ [&quot;Candidate&quot;] ]elections_year_index[&quot;Candidate&quot;].to_frame()//get 第二到第四行elections_year_index[2:5]//get first rowelections_year_index[0:1]//error if there is no column named numeric 0elections_year_index[0] Boolean Array Selection and Querying123456789101112//假设一共6行，需要第2 3 5行(获得胜利的)elections[ [False, True, True, False, True, False] ]//需要获得胜利的elections[ elections[&quot;Result&quot;] == &quot;win&quot; ]elections[ (elections[&quot;Result&quot;] == &quot;win&quot;) &amp;(elections[&quot;someOthercolumn&quot;] &lt; someothercondition) ] //可以组合//isin() 和 query()elections['Party'].isin([&quot;Republican&quot;, &quot;Democratic&quot;]) //返回list of true or falseelections[elections_year_index['Party'].isin([&quot;Republican&quot;, &quot;Democratic&quot;])] //返回符合要求的row//query 快捷输入筛选条件elections_year_index.query(&quot;Result == 'win' and Year &lt; 2000&quot;) //返回符合要求的row Not：~ (e.g A不等于B： ~(A==B) ) Index with loc and ilocLoc: Access values by labels(names), indexiloc: Access value by position(因为index不一定unique，所以index不等于position， position更像传统意义上的数组index) Loc (inclusive on both end) 12345678910111213141516elections.loc[ [index_name, iname2, iname 3], [&quot;column name1&quot;, &quot;cname2&quot;]]elections_year_index.loc[[1980, 1984], ['Candidate','Party']] //返回数据可能不止两条 可能有多条index为1980/1984的row//slice here is inclusive on both endelections.loc[0:4, 'Candidate':'Year'] //返回data frameelections.loc[0:4, 'Candidate'] //返回serieselections.loc[0:4, ['Candidate']] //返回data frameelections.loc[0, 'Candidate':'Year'] //serieselections.loc[[0], 'Candidate':'Year'] //data frame//loc支持boolean arrays，所以也可以进行row 和column的筛选elections.loc[[True, False, False, True], 'Candidate':'%']elections.loc[['Party']] 'If we omit the column argument altogether, the default behavior is to retrieve all columns.' iloc 1elections.iloc[0:3, 0:3] //返回top3 rows， exclusive on right end Some Useful Function12345678910max(A)np.mean(A)A.head()A.size //all entries, row*columnA.shape //(row, column)A.describe()A.sort_values('columnName', ascending=False) //默认升序ascending = trueA.query()A.value_counts()A.unique() // returns all unique values as a numpy array","link":"/2020/07/01/Data-100%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Pandas/"},{"title":"Java 数据结构 - 1","text":"Class Inheritance &amp; Interface Implements class method - static methods （Math.man(); Math.sqry()….) instance method - non-static methods public static void main(String[] args) { }###Overrding vs Overloadingoverriding: same name and same sigaturesoverloading: same name but different signatures(parameters) Static type vs Dynamic typeList a = new ArrayList() // Static type a = new Dynamic type ()Dynamic method selection: java checks static type when calls method Compiler plays it safe and only allows us to do things according to the static type. For overridden methods (not overloaded methods), the actual method invoked is basedon the dynamic type of the invoking expression (如果static type没有此方法, then compiletime error) Can use casting to overrule compiler type checking. ExtendsConstructors Are Not Inherited: super() interface vs astract classinterface: All methods must be public. All variables must be public static final. Cannot be instantiated All methods are by default abstract unless specified to be default Can implement more than one interface per class abstract class: Methods can be public or private Can have any types of variables Cannot be instantiated Methods are by default concrete unless specified to be abstract Can only implement one per class Lists: ordered collection of itemsIntList需要改进， 创建添加都很麻烦为了后续 将IntList命名为 IntNode 123456789public class IntNode{ public int item; public IntNode next; public IntNode(int i, IntNode n){ item= i; next= n; }} 类LinkedList（SLList)在list前面加一个sentinel 一个dummyhead通常会有利于对于special case, Null 的处理大概逻辑如下： 1234567891011121314151617public class SLList { public IntNode first; public int size; public SLList() { first = null; size = 0; } public SLList(int x) { first = new IntNode(x, null); size = 0; } / ** Adds an item to the front of the list. */ public void addFirst(int x) { first = new IntNode(x, first); size += 1; }} Arrays12345int x = new int[3];y = new int[]{1,2,3,4};int[] z = {1,2,3,4};int[][] 2D = new int[4][];arrays.length; AList (Array based list)resize array when size == items.length. resize(size * RFACTOR); Java 标准list库ArrayList1234567891011121314ArrayList&lt;T&gt; a = new ArrayList&lt;&gt;();a.add(int index, E element); // a.add(E element); add to the end of the lista.contains();a.size();a.get(index);a.remove();a.isEmpty();a.indexof();a.lastIndexof();a.toArray();a.sort(Comparator&lt;&gt; c)a.clear();a.set(index, element); //replacea.clone(); shallow copy LinkedList (和上面基本一致，可以getLast/addLast）collection list用add get / Deque用offer/peek/poll 12345List&lt;T&gt; l = new LinkedList&lt;&gt;();l.add(); // same for get 和remove: l.get(); l.getFirst(); l.getLast()l.addFirst();l.addLast();l.toArray(); Set and MapSet: unordered collection of strictly unique itemsHashSet12345Set&lt;T&gt; s = new HashSet&lt;&gt;();s.add();s.contains();s.isempty();s.remove(); TreeSet还没用过 Map: collection of key/value pairsHashMap12345678910Map&lt;K,V&gt; map = new HashMap&lt;&gt;();map.containsKey();map.containsValue();map.keySet();map.value();map.get();map.getOrDefault();map.put(K,V);map.remove();map.replace(); Comparable &amp; IterableComparable123456789101112131415import java.util.Comparator;public class Dog implements Comparable&lt;Dog&gt; { ... public int compareTo(Dog uddaDog) { return this.size - uddaDog.size; } private static class NameComparator implements Comparator&lt;Dog&gt; { public int compare(Dog a, Dog b) { return a.name.compareTo(b.name); }} public static Comparator&lt;Dog&gt; getNameComparator() { return new NameComparator(); }} when use: Comparator&lt;Dog&gt; nc = Dog.getNameComparator(); retrieve the new created comparator###Iterable 如果要给class需要循环，需要 implements Iterable&lt;T&gt; 1234567891011121314151617181920212223242526272829303132333435363738public interface Iterable&lt;T&gt;{ Iterator&lt;T&gt; iterator();}public interface Iterator&lt;T&gt;{ boolean hasNext(); T next();}//举例public class ArraySet&lt;T&gt; implements Iterable&lt;T&gt;{ ... public Iterator&lt;T&gt; iterator() { return new ArraySetIterator(); } private class ArraySetIterator implements Iterator&lt;T&gt; { private int wizPos; public ArraySetIterator() { wizPos = 0; } public boolean hasNext() { return wizPos &lt; size; } public T next() { T returnItem = items[wizPos]; wizPos += 1; return returnItem; } ... public static void main(String[] args) { ArraySet&lt;Integer&gt; aset = new ArraySet&lt;&gt;(); aset.add(5); aset.add(23); //iteration for (int i : aset) { System.out.println(i); } }} StringBuilder sb = new StringBuilder(“a”);sb.append(“b”);sb.toString; throw/catch exception package","link":"/2020/07/05/Java-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/"},{"title":"我的第一篇博客文章","text":"vim编辑器回忆vim 文件名进入编辑模式后，escape + i 进入编辑模式 第二章 ：w保存：q退出：q! 不保存退出","link":"/2020/06/30/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"},{"title":"Hexo搭建个人博客","text":"Hexo是一个基于nodejs 的静态博客网站生成器。 安装node.js和git可使用git --version查看git版本；可使用node -v和npm -v查看nodejs是否已安装成功 安装Hexo $ npm install -g hexo-cli国内镜像源速度较慢，可使用npm install -g cnpm --registry==https://registry.npm.taobao. org 下载淘宝cnpm加快速度初次尝试出现errno -13, Missing write acess解决方案：Terminal里 sudo su切换到root用户 暂时申请root权限。输入密码后显示sh-3.2#，再次尝试安装hexo成功，可使用hexo -v进行验证 使用Hexo搭建博客mkdir blog 创建blog文件夹，可自行选择位置cd blog进入文件夹之后， 使用管理员权限sudo初始化hexo sudo hexo init， 默认landscape主题 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt; $ npm install //可实现效果相同 Start blogging with Hexo!hexo s 等同于hexo server, 启动本地服务器，预览主题。默认地址为: http://localhost:4000在本地浏览器输入localhost:4000，页面已经生成。 新建一篇文章首先Crtl+c断开hexo连接使用hexo new &quot;我的第一篇博客文章&quot;.可以terminal内vim直接修改，也可以打开文件修改。删除文章只需要在本地删除_posts文件夹内的文件，重新部署即可hexo clean清除hexo generate 生成hexo s 再次连接 远端部署到Github上 New Repository：新建仓库，仓库名以 用户名+github.io 的格式填写。必须符合命名要求。 在blog内安装deploy-git插件 1npm install hexo-deployer-git --save 打开_config.yml 文件，在文件最底处，deployment添加配置 1234deploy: type: git repo: http://github.com/GithubName/GithubName.github.io.git branch: master 使用hexo deploy部署到远端 之后就能在http://GithubName.github.io 这个网站看到博客了。","link":"/2020/06/30/%E6%90%AD%E5%BB%BAHexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[],"categories":[]}